package caching.incremental;

import caching.Utils;
import caching.base.AbstractCachingPolicy;
import caching.base.IEMC;
import exceptions.CriticalFailureException;
import sim.content.Chunk;
import sim.space.cell.smallcell.SmallCell;
import sim.space.users.CachingUser;

/**
 * Efficient Proactive Caching implementation with Cache decisions cancelation
 * supported and no support for any cache replacement policies. Unlike the
 * Incremental1 implementation of the same package, this implementation uses the
 * sum of probabilities to asses the gain of a cache decision. And like
 * Incremental1,if any of the mobile requestors tries to cancel a request for an
 * item, then the item is evicted, which differentiates this implementation from
 * IncrementalSumProb2.
 *
 * @author xvas
 */
public class EMC extends caching.incremental.EPC implements IEMC {

    private static EMC singleton = new EMC();

    /**
     * @return the singleton instance of this class according to its placement
     * in the hierarchy of AbstractMethod class descendants.
     */
    public static AbstractCachingPolicy instance() {
        return singleton;
    }

    protected EMC() {
    }

    @Override
    public String nickName() {
        return "EMC";
    }

    @Override
    public double assess(CachingUser mu, Chunk chunk, SmallCell sc) throws CriticalFailureException {
        double assessment = Utils.assessEMC(chunk, sc, this);
        return assessment;
    }

}
