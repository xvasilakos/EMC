package sim.content;

import app.properties.Cost;
import app.properties.valid.Values;
import java.util.Objects;
import sim.ISimulationMember;
import sim.Simulation;
import sim.space.cell.CellRegistry;

/**
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public abstract class AbstractContent implements IContent, ISimulationMember {

    private final long _id;
    private final long _sizeBytes;
    private final Simulation _sim;

    private double _remoteTransferCost;

    private final String _remoteCostType;
    private double _costOfTransferMCWireless;
    private double _costOfTransferSCWireless;

    /**
     * Creates a new item. Note that the size loaded is expected to be in bytes.
     *
     * @param id
     * @param sim
     * @param sizeInBytes
     */
    protected AbstractContent(long id, Simulation sim, long sizeInBytes) {

        _sizeBytes = sizeInBytes;
        _id = id;
        _sim = sim;

        _remoteCostType = getSim().getScenario().stringProperty(Cost.Transfer.TRANSFER_COST_ON_MISS__TYPE);

        double hopMean = getSim().getScenario().doubleProperty(Cost.Transfer.TRANSFER__PROPAGATION__HOP_COUNT__MEAN);
        double hopStdev = getSim().getScenario().doubleProperty(Cost.Transfer.TRANSFER__PROPAGATION__HOP_COUNT__STD);
        redefineRemoteTransferAndMCCost(false, hopMean, hopStdev); // call again if CDN exists after creating all documents

        if (_remoteCostType.equalsIgnoreCase(Values.MONETARY)) {

            _costOfTransferSCWireless = 0.0;

            _costOfTransferMCWireless = getSim().getScenario().doubleProperty(Cost.Transfer.MC__MDU);
        } else if (_remoteCostType.equalsIgnoreCase(Values.PROPAGATION_DELAY__PLUS__MC_WIRELESS)) {

            _costOfTransferSCWireless = getSim().getScenario().doubleProperty(
                    Cost.Transfer.COST__TRANSFER__WIRELESS_HOP_COST__SC);

            _costOfTransferMCWireless = getSim().getScenario().doubleProperty(
                    Cost.Transfer.COST__TRANSFER__WIRELESS_HOP_COST__MC);
        } else {
            throw new UnsupportedOperationException(
                    "Unknown value \"" + _remoteCostType + "\""
                    + " passed to property " + Cost.Transfer.TRANSFER_COST_ON_MISS__TYPE);
        }
    }

    public static int sumSize(AbstractContent... contents) {
        int sum = 0;
        for (AbstractContent nxt : contents) {
            sum += nxt.sizeInBytes();
        }
        return sum;
    }

    @Override
    public final long getID() {
        return _id;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final AbstractContent other = (AbstractContent) obj;
        if (this._id != other._id) {
            return false;
        }
        if (this._sizeBytes != other._sizeBytes) {
            return false;
        }
        return this._sim.equals(other._sim);
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 79 * hash + (int) (this._id ^ (this._id >>> 32));
        hash = 79 * hash + this._sim.hashCode();
        return hash;
    }

    @Override
    public final long sizeInBytes() {
        return _sizeBytes;
    }

    @Override
    public final double sizeInMBs() {
        return _sizeBytes / Math.pow(1024,2);
    }

    @Override
    public String toString() {
        StringBuilder strBld = new StringBuilder().
                append(getClass().getSimpleName()).
                append(": ");
        strBld.append("<id=").
                append(getID()).
                append("; size ").
                append(sizeInMBs()).
                append(" MB>");
//xxx uncomment the following. tmp commenting for debugging only
//        if (_remoteCostType.equalsIgnoreCase(Values.PROPAGATION_DELAY__PLUS__MC_WIRELESS)) {
//            try {
//                strBld.append("; Remote transfer+MC transfer cost=").append(costOfTransferMC_BH()).
//                        append("; BH+SC transfer cost=").append(costOfTransferBHandSC()).
//                        append("; Cached (SC only) cost=").append(costOfTransferSC());
//            } catch (Throwable ex) {
//                strBld.append("; Remote transfer+MC transfer cost=").append(costOfTransferMC_BH()).
//                        append("; BH+SC transfer cost=").append("ERROR").
//                        append("; Cached (SC only) cost=").append("ERROR");
//            }
//        }
        return strBld.toString();
    }

    @Override
    public final int simTime() {
        return _sim.simTime();
    }

    @Override
    public final String simTimeStr() {
        return "[" + simTime() + "]";
    }

    @Override
    public final int simID() {
        return _sim.getID();
    }

    @Override
    public final Simulation getSim() {
        return _sim;
    }

    @Override
    public final CellRegistry simCellRegistry() {
        return _sim.getCellRegistry();
    }

    @Override
    public ContentDocument referredContentDocument() {
        return getSim().getTrcDocs().get(this.getID());
    }

    @Override
    public final double gainOfTransferSCThroughBH() {
        return costOfTransferMC_BH() - costOfTransferSC_BH();
    }

    @Override
    public final double gainOfTransferSCCacheHit() {
        return costOfTransferMC_BH() - costOfTransferSCCacheHit();
    }

    @Override
    public final double costOfTransferSC_BH() {
        return _costOfTransferSCWireless + _remoteTransferCost;
    }

    @Override
    public final double costOfTransferSCCacheHit() {
        return _costOfTransferSCWireless;
    }

    /**
     *
     * @return
     */
    @Override
    public final double costOfTransferMC_BH() {
        return _costOfTransferMCWireless + _remoteTransferCost;
    }

    public final void redefineRemoteTransferAndMCCost(boolean isCDNCached, double hopMean, double hopStdev) {
        if (isCDNCached || _remoteCostType.equalsIgnoreCase(Values.MONETARY)) {
            _remoteTransferCost = 0;
            return;
        }
        if (_remoteCostType.equalsIgnoreCase(Values.PROPAGATION_DELAY__PLUS__MC_WIRELESS)) {
            double ratio = getSim().getRandomGenerator().getGaussian(
                    hopMean, hopStdev
            );
            _remoteTransferCost = ratio * getSim().getScenario()
                    .doubleProperty(Cost.Transfer.TRANSFER__HOP_COST);

            return;
        }

        throw new UnsupportedOperationException("Unkown value \"" + _remoteCostType + "\""
                + " passed to property " + Cost.Transfer.TRANSFER_COST_ON_MISS__TYPE);

    }

}
