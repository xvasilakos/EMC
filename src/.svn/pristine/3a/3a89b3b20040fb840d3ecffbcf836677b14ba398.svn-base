package sim.time;

import app.properties.Simulation;
import exceptions.NotIntiliazedException;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import sim.ScenariosFactory;

/**
 * Clock used for simulations ending after a finite _sim time has passed.
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public class FiniteRequestsClock extends FiniteTimeClock {

    protected final long _maxReqNum;

    /**
     * Percentage of simulations batch progress with two decimals.
     *
     * @return
     * @throws exceptions.NotIntiliazedException
     */
    public static double globalProgressPercent() throws NotIntiliazedException {
        double completedScenarios
                = (double) ScenariosFactory.completedScenariosNum()
                / ScenariosFactory.initialScenariosNum();
        double globalProgressPercent = ((int) (10000 * completedScenarios)) / 100.0;
        return globalProgressPercent;
    }

    public FiniteRequestsClock(sim.SimulationBaseRunner sim) {
        super(sim);
        _logger = Logger.getLogger(getClass().getCanonicalName());

        if (sim == sim.NONE) {
            _maxReqNum = -1;
            return;
        }

        _maxReqNum = _setup.intProperty(Simulation.Clock.MAX_REQ_NUM);
    }

    @Override
    protected void check() throws NormalSimulationEndException {
        reportProgressLcl();

        if (getSim().getWrkloadConsumed() > _maxReqNum
                || getSim().getWrkloadConsumedPercent() > .99) {
            try {
                Toolkit.getDefaultToolkit().beep();
            } catch (Exception e) {//ignore
            } finally {
                throw new NormalSimulationEndException(
                        "Maximum number of requests loaded.");
            }
        }
    }

    @Override
    protected void reportProgressLcl() {
        if (isPeriodicLoging()) {

            String msg = LOG_SEPARATOR
                    + "Simulation {0} time {1}:\n"
                    /////////////
                    + "\t- Parallel Running simulations {2}\n"
                    + "\t- Global simulations time elapsed {3}\n"
                    + LOG_SEPARATOR
                    + "\t- Total requests consumed: {4} ({5}%)\n"
                    + "\t- Max threashold of loaded requests: {6}\n";

            _logger.log(Level.INFO,
                    msg,
                    new Object[]{
                        /*0*/simID(),
                        /*1*/ simTime(),
                        /*2*/ sim.SimulationBaseRunner.getRunningSimulations(),
                        /*3*/ realGlobalTimeElapsedStr(),
                        /*4*/ _sim.getWrkloadConsumed(),
                        /*5*/ _sim.getWrkloadConsumedPercent(),
                        /*6*/ _maxReqNum
                    });

        }
    }

    @Override
    public int tick() throws NormalSimulationEndException {
        return super.tick();
    }

    public long getMaxReqNum() {
        return _maxReqNum;
    }

}
