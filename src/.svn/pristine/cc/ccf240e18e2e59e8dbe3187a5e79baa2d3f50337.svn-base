package stats.output.aggregating.gui;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import stats.StatisticException;
import stats.Statistics;
import static stats.output.Constants.DEFAULT_STATS_PATH;
import static stats.output.aggregating.AggregatorApp.aggrRpts;
import static stats.output.aggregating.AggregatorApp.chooseConfidenceInterval;
import static stats.output.aggregating.AggregatorApp.grpScenarios;
import static stats.output.aggregating.AggregatorApp.parseResultsFiles;
import static stats.output.aggregating.AggregatorApp.selectFiles;
import stats.output.aggregating.ResultsFile;
import util.CommonFunctions;

/**
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Statistics titles to be considered.
     */
    private String[] statTitlesConsidered
            = new String[]{
                "G%(MaxPop)", 
                "G%(incremental.EMC)", 
                "G%(incremental.Naive)", 
                "G%(incremental.Oracle)", 
                "G%(rplc.mingain.no_price.EMC_LC_Full)", 
                "G%(rplc.mingain.no_price.EMPC_LC_Full)"
            };

//            = new String[]{
//                "G%(incremental.sum.EPC1)",
////                "G%(rplc.mingain.sum.EPCPopFull)",
////                "G%(rplc.mingain.sum.no_price.EPCFull)",
//                "G%(rplc.mingain.sum.no_price.EPCPopFull)",
////                "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime1000)",
////                "G%(rplc.mingain.sum.heuristic.time.dynamic.EPCPopNoRplc_a)",
////                "G%(rplc.mingain.sum.heuristic.time.dynamic.EPCPopNoRplc_c1)",
////                "G%(rplc.mingain.sum.heuristic.time.dynamic.EPCPopNoRplc_c2)",
////                "G%(rplc.mingain.sum.heuristic.time.dynamic.EPCPopNoRplc_b)",
//                "G%(MaxPopularityPolicy)",
//                "G%(incremental.Naive01)",
//                "G%(incremental.Oracle)"
//            };
//         = new String[]{
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTimeComma025)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTimeComma050)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime01)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime02)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime04)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime06)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime08)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime10)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime12)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime14)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime16)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime18)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime20)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime22)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime24)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime26)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime28)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime30)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime32)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime34)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime36)",
//            "G%(rplc.mingain.sum.heuristic.time.EPCPopNoRplTime38)"
//         };

    private Set<String> grping__ignoredParams = new TreeSet<>(Arrays.asList(
            new String[]{
                //      "TU",
                //      "gamma", 
                //            "BF", "#SCs", "SCrd"
                "dmdTrc",
                "rpt",
                "sc"
            }));

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        //<editor-fold defaultstate="collapsed" desc="statTitlesFilter__jList.setModel(...);">
        DefaultListModel<String> model = new DefaultListModel();
        for (String nxt__statTitle : statTitlesConsidered) {
            model.addElement(nxt__statTitle);
        }
        statTitlesFilter__jList.setModel(model);
        statTitlesFilter__jList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="ignoredParams__jList.setModel(...);">
        model = new DefaultListModel();
        for (String nxt__ignoredParam : grping__ignoredParams) {
            model.addElement(nxt__ignoredParam);
        }
        ignoredParams__jList.setModel(model);
        ignoredParams__jList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //</editor-fold>
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        iterativeMUTitlesPanel = new javax.swing.JPanel();
        statTitlesAdd_jButton = new javax.swing.JButton();
        statTitleAdd__jtextfiled = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        statTitlesFilter__jList = new javax.swing.JList();
        statTitlesRemove_jButton = new javax.swing.JButton();
        autoOutput__jToggleBut = new javax.swing.JToggleButton();
        autoOpen__jToggleBut = new javax.swing.JToggleButton();
        iterativeMUTitlesPanel1 = new javax.swing.JPanel();
        ignoredParamAdd_jButton = new javax.swing.JButton();
        ignoredParamAdd__jtextfiled = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        ignoredParams__jList = new javax.swing.JList();
        ignoredParamRemove_jButton = new javax.swing.JButton();
        aggrRpts_pnl = new javax.swing.JPanel();
        mean__jToggle = new javax.swing.JToggleButton();
        stdev__jToggle = new javax.swing.JToggleButton();
        conf_95__jToggle = new javax.swing.JToggleButton();
        conf_none__jToggle = new javax.swing.JToggleButton();
        conf_aks__jToggle = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        grpScenarios__jBut = new javax.swing.JButton();
        fileTypes_pnl = new javax.swing.JPanel();
        transientStat__jRad = new javax.swing.JRadioButton();
        aggrStat__jRad = new javax.swing.JRadioButton();
        skipUntilTimeTextField = new javax.swing.JTextField();
        skipUntilTimeLbl = new javax.swing.JLabel();
        aggrRpts__jBut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainPanel.setName("mainPanel"); // NOI18N

        iterativeMUTitlesPanel.setBackground(new java.awt.Color(230, 230, 230));
        iterativeMUTitlesPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("stats/output/aggregating/gui/Bundle"); // NOI18N
        statTitlesAdd_jButton.setText(bundle.getString("MainFrame.statTitlesAdd_jButton.text")); // NOI18N
        statTitlesAdd_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statTitlesAdd_jButtonActionPerformed(evt);
            }
        });

        statTitleAdd__jtextfiled.setText(bundle.getString("MainFrame.statTitleAdd__jtextfiled.text")); // NOI18N
        statTitleAdd__jtextfiled.setToolTipText(bundle.getString("MainFrame.statTitleAdd__jtextfiled.toolTipText")); // NOI18N
        statTitleAdd__jtextfiled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statTitleAdd__jtextfiledActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        statTitlesFilter__jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        statTitlesFilter__jList.setToolTipText(bundle.getString("MainFrame.statTitlesFilter__jList.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(statTitlesFilter__jList);

        statTitlesRemove_jButton.setText(bundle.getString("MainFrame.statTitlesRemove_jButton.text")); // NOI18N
        statTitlesRemove_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statTitlesRemove_jButtonActionPerformed(evt);
            }
        });

        autoOutput__jToggleBut.setSelected(true);
        autoOutput__jToggleBut.setText(bundle.getString("MainFrame.autoOutput__jToggleBut.text")); // NOI18N
        autoOutput__jToggleBut.setToolTipText(bundle.getString("MainFrame.autoOutput__jToggleBut.toolTipText")); // NOI18N
        autoOutput__jToggleBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoOutput__jToggleButActionPerformed(evt);
            }
        });

        autoOpen__jToggleBut.setSelected(true);
        autoOpen__jToggleBut.setText(bundle.getString("MainFrame.autoOpen__jToggleBut.text")); // NOI18N
        autoOpen__jToggleBut.setToolTipText(bundle.getString("MainFrame.autoOpen__jToggleBut.toolTipText")); // NOI18N
        autoOpen__jToggleBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoOpen__jToggleButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout iterativeMUTitlesPanelLayout = new javax.swing.GroupLayout(iterativeMUTitlesPanel);
        iterativeMUTitlesPanel.setLayout(iterativeMUTitlesPanelLayout);
        iterativeMUTitlesPanelLayout.setHorizontalGroup(
            iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterativeMUTitlesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(iterativeMUTitlesPanelLayout.createSequentialGroup()
                        .addComponent(statTitlesAdd_jButton)
                        .addGap(18, 18, 18)
                        .addComponent(statTitleAdd__jtextfiled)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, iterativeMUTitlesPanelLayout.createSequentialGroup()
                        .addComponent(autoOutput__jToggleBut)
                        .addGap(18, 18, 18)
                        .addComponent(autoOpen__jToggleBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(statTitlesRemove_jButton))))
            .addGroup(iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(iterativeMUTitlesPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        iterativeMUTitlesPanelLayout.setVerticalGroup(
            iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iterativeMUTitlesPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statTitlesAdd_jButton)
                    .addComponent(statTitleAdd__jtextfiled, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 347, Short.MAX_VALUE)
                .addGroup(iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statTitlesRemove_jButton)
                    .addComponent(autoOutput__jToggleBut)
                    .addComponent(autoOpen__jToggleBut)))
            .addGroup(iterativeMUTitlesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(iterativeMUTitlesPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab(bundle.getString("MainFrame.iterativeMUTitlesPanel.TabConstraints.tabTitle"), null, iterativeMUTitlesPanel, bundle.getString("MainFrame.iterativeMUTitlesPanel.TabConstraints.tabToolTip")); // NOI18N
        iterativeMUTitlesPanel.getAccessibleContext().setAccessibleName(bundle.getString("MainFrame.iterativeMUTitlesPanel.AccessibleContext.accessibleName")); // NOI18N

        iterativeMUTitlesPanel1.setBackground(new java.awt.Color(230, 230, 230));
        iterativeMUTitlesPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        iterativeMUTitlesPanel1.setLayout(new java.awt.GridBagLayout());

        ignoredParamAdd_jButton.setText(bundle.getString("MainFrame.ignoredParamAdd_jButton.text")); // NOI18N
        ignoredParamAdd_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoredParamAdd_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        iterativeMUTitlesPanel1.add(ignoredParamAdd_jButton, gridBagConstraints);

        ignoredParamAdd__jtextfiled.setText(bundle.getString("MainFrame.ignoredParamAdd__jtextfiled.text")); // NOI18N
        ignoredParamAdd__jtextfiled.setToolTipText(bundle.getString("MainFrame.ignoredParamAdd__jtextfiled.toolTipText")); // NOI18N
        ignoredParamAdd__jtextfiled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoredParamAdd__jtextfiledActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 311;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 15, 0, 12);
        iterativeMUTitlesPanel1.add(ignoredParamAdd__jtextfiled, gridBagConstraints);

        ignoredParams__jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        ignoredParams__jList.setToolTipText(bundle.getString("MainFrame.ignoredParams__jList.toolTipText")); // NOI18N
        jScrollPane4.setViewportView(ignoredParams__jList);

        jScrollPane3.setViewportView(jScrollPane4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 369;
        gridBagConstraints.ipady = 189;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 0, 12);
        iterativeMUTitlesPanel1.add(jScrollPane3, gridBagConstraints);

        ignoredParamRemove_jButton.setText(bundle.getString("MainFrame.ignoredParamRemove_jButton.text")); // NOI18N
        ignoredParamRemove_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoredParamRemove_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 241, 2, 12);
        iterativeMUTitlesPanel1.add(ignoredParamRemove_jButton, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("MainFrame.iterativeMUTitlesPanel1.TabConstraints.tabTitle"), null, iterativeMUTitlesPanel1, bundle.getString("MainFrame.iterativeMUTitlesPanel1.TabConstraints.tabToolTip")); // NOI18N

        aggrRpts_pnl.setBackground(new java.awt.Color(230, 230, 230));
        aggrRpts_pnl.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("MainFrame.aggrRpts_pnl.border.outsideBorder.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED))); // NOI18N

        mean__jToggle.setSelected(true);
        mean__jToggle.setText(bundle.getString("MainFrame.mean__jToggle.text")); // NOI18N
        mean__jToggle.setToolTipText(bundle.getString("MainFrame.mean__jToggle.toolTipText")); // NOI18N
        mean__jToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mean__jToggleActionPerformed(evt);
            }
        });

        stdev__jToggle.setText(bundle.getString("MainFrame.stdev__jToggle.text")); // NOI18N
        stdev__jToggle.setToolTipText(bundle.getString("MainFrame.stdev__jToggle.toolTipText")); // NOI18N
        stdev__jToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdev__jToggleActionPerformed(evt);
            }
        });

        buttonGroup2.add(conf_95__jToggle);
        conf_95__jToggle.setSelected(true);
        conf_95__jToggle.setText(bundle.getString("MainFrame.conf_95__jToggle.text")); // NOI18N
        conf_95__jToggle.setToolTipText(bundle.getString("MainFrame.conf_95__jToggle.toolTipText")); // NOI18N
        conf_95__jToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conf_95__jToggleActionPerformed(evt);
            }
        });

        buttonGroup2.add(conf_none__jToggle);
        conf_none__jToggle.setText(bundle.getString("MainFrame.conf_none__jToggle.text")); // NOI18N
        conf_none__jToggle.setToolTipText(bundle.getString("MainFrame.conf_none__jToggle.toolTipText")); // NOI18N
        conf_none__jToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conf_none__jToggleActionPerformed(evt);
            }
        });

        buttonGroup2.add(conf_aks__jToggle);
        conf_aks__jToggle.setText(bundle.getString("MainFrame.conf_aks__jToggle.text")); // NOI18N
        conf_aks__jToggle.setToolTipText(bundle.getString("MainFrame.conf_aks__jToggle.toolTipText")); // NOI18N
        conf_aks__jToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conf_aks__jToggleActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout aggrRpts_pnlLayout = new javax.swing.GroupLayout(aggrRpts_pnl);
        aggrRpts_pnl.setLayout(aggrRpts_pnlLayout);
        aggrRpts_pnlLayout.setHorizontalGroup(
            aggrRpts_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aggrRpts_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(conf_95__jToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                        .addGroup(aggrRpts_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(conf_none__jToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conf_aks__jToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aggrRpts_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stdev__jToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mean__jToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        aggrRpts_pnlLayout.setVerticalGroup(
            aggrRpts_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                .addGroup(aggrRpts_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(conf_95__jToggle)
                        .addGap(3, 3, 3)
                        .addComponent(conf_none__jToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conf_aks__jToggle))
                    .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(aggrRpts_pnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mean__jToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stdev__jToggle)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        grpScenarios__jBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stats/output/aggregating/gui/icons/grpIcon_small.jpg"))); // NOI18N
        grpScenarios__jBut.setText(bundle.getString("MainFrame.grpScenarios__jBut.text")); // NOI18N
        grpScenarios__jBut.setToolTipText(bundle.getString("MainFrame.grpScenarios__jBut.toolTipText")); // NOI18N
        grpScenarios__jBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        grpScenarios__jBut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grpScenarios__jBut.setIconTextGap(1);
        grpScenarios__jBut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        grpScenarios__jBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grpScenarios__jButActionPerformed(evt);
            }
        });

        fileTypes_pnl.setBackground(new java.awt.Color(230, 230, 230));
        fileTypes_pnl.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("MainFrame.fileTypes_pnl.border.outsideBorder.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED))); // NOI18N

        buttonGroup1.add(transientStat__jRad);
        transientStat__jRad.setText(bundle.getString("MainFrame.transientStat__jRad.text")); // NOI18N
        transientStat__jRad.setMinimumSize(new java.awt.Dimension(50, 50));
        transientStat__jRad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transientStat__jRadActionPerformed(evt);
            }
        });

        buttonGroup1.add(aggrStat__jRad);
        aggrStat__jRad.setSelected(true);
        aggrStat__jRad.setText(bundle.getString("MainFrame.aggrStat__jRad.text")); // NOI18N
        aggrStat__jRad.setActionCommand(bundle.getString("MainFrame.aggrStat__jRad.actionCommand")); // NOI18N
        aggrStat__jRad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggrStat__jRadActionPerformed(evt);
            }
        });

        skipUntilTimeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        skipUntilTimeTextField.setText(bundle.getString("MainFrame.skipUntilTimeTextField.text")); // NOI18N
        skipUntilTimeTextField.setToolTipText(bundle.getString("MainFrame.skipUntilTimeTextField.toolTipText")); // NOI18N
        skipUntilTimeTextField.setEnabled(false);
        skipUntilTimeTextField.setMinimumSize(new java.awt.Dimension(50, 50));
        skipUntilTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipUntilTimeTextFieldActionPerformed(evt);
            }
        });

        skipUntilTimeLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        skipUntilTimeLbl.setLabelFor(skipUntilTimeTextField);
        skipUntilTimeLbl.setText(bundle.getString("MainFrame.skipUntilTimeLbl.text")); // NOI18N
        skipUntilTimeLbl.setToolTipText(bundle.getString("MainFrame.skipUntilTimeLbl.toolTipText")); // NOI18N
        skipUntilTimeLbl.setEnabled(false);
        skipUntilTimeLbl.setMinimumSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout fileTypes_pnlLayout = new javax.swing.GroupLayout(fileTypes_pnl);
        fileTypes_pnl.setLayout(fileTypes_pnlLayout);
        fileTypes_pnlLayout.setHorizontalGroup(
            fileTypes_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTypes_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileTypes_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aggrStat__jRad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(fileTypes_pnlLayout.createSequentialGroup()
                        .addComponent(transientStat__jRad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(skipUntilTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipUntilTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addGap(2, 2, 2))
        );
        fileTypes_pnlLayout.setVerticalGroup(
            fileTypes_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTypes_pnlLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(fileTypes_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(fileTypes_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(skipUntilTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(skipUntilTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(transientStat__jRad, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aggrStat__jRad)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        transientStat__jRad.getAccessibleContext().setAccessibleName(bundle.getString("MainFrame.transientStat__jRad.AccessibleContext.accessibleName")); // NOI18N

        aggrRpts__jBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stats/output/aggregating/gui/icons/merge.png"))); // NOI18N
        aggrRpts__jBut.setText(bundle.getString("MainFrame.aggrRpts__jBut.text")); // NOI18N
        aggrRpts__jBut.setToolTipText(bundle.getString("MainFrame.aggrRpts__jBut.toolTipText")); // NOI18N
        aggrRpts__jBut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aggrRpts__jBut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aggrRpts__jBut.setIconTextGap(1);
        aggrRpts__jBut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aggrRpts__jBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggrRpts__jButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(aggrRpts_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addComponent(grpScenarios__jBut, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(aggrRpts__jBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(fileTypes_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(aggrRpts_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileTypes_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(aggrRpts__jBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(grpScenarios__jBut, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        aggrRpts_pnl.getAccessibleContext().setAccessibleName(bundle.getString("MainFrame.aggrRpts_pnl.AccessibleContext.accessibleName")); // NOI18N
        grpScenarios__jBut.getAccessibleContext().setAccessibleName(bundle.getString("MainFrame.grpScenarios__jBut.AccessibleContext.accessibleName")); // NOI18N

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void grpScenarios__jButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grpScenarios__jButActionPerformed
       try {
           Set statsTitles = new TreeSet<>(statTitlesFilter__jList.getSelectedValuesList());
           Set ignoredParams = new HashSet<>(ignoredParams__jList.getSelectedValuesList());

           JFileChooser jchosser = selectFiles(DEFAULT_STATS_PATH, false, "Group results from different scenarios.",
                   "Group");
           if (jchosser == null) {
               return; // if aborted by user
           }
           ResultsFile[] resultsFiles = parseResultsFiles(statsTitles,
                   jchosser.getSelectedFiles(),
                   transientStat__jRad.isSelected(),
                   Integer.parseInt(skipUntilTimeTextField.getText()));

           //<editor-fold defaultstate="collapsed" desc="String aggrResults parent path and file name">
           /*
          * Parent path:   The same as with the partent directory of first file from the selected files.
            */
           String aggrResults__parentPath = jchosser.getSelectedFile().getParentFile().getCanonicalPath();

           /* 
          * File name:     Constructed after the titles included in statTitlesFilter
            */
           String statsIncluded = CommonFunctions.toString("", "", "", "_", statsTitles);
           statsIncluded = statsIncluded.length() > 20 ? statsIncluded.substring(0, 20) : statsIncluded;
           String aggrResults__FileName = jchosser.getSelectedFile().getParentFile().getName() + "_"
                   + "grpSce_"
                   + statsIncluded
                   //+ "_" + new SimpleDateFormat("y-M-dd_HH-mm").format(Calendar.getInstance().getTime())
                   + ".csv";
           //</editor-fold>

           String path = aggrResults__parentPath + "/" + aggrResults__FileName;
           grpScenarios(statsTitles, ignoredParams, resultsFiles, path,
                   transientStat__jRad.isSelected(), mean__jToggle.isSelected(), stdev__jToggle.isSelected(),
                   !conf_none__jToggle.isSelected());

           //<editor-fold defaultstate="collapsed" desc="inform user about results path">
           String msg = "Results from different Repeats aggregated to file \"" + aggrResults__FileName + "\"."
                   + "\nStatistics used: " + CommonFunctions.toString(statsTitles)
                   + "\nIgnored Grouping parameters: " + CommonFunctions.toString(ignoredParams);
           JOptionPane.showInputDialog(this, msg, "Operation Completed", JOptionPane.INFORMATION_MESSAGE, null, null, path);
           //</editor-fold>
       } catch (IOException | StatisticException ex) {
           Logger.getGlobal().log(Level.SEVERE, null, ex);
       }

       JOptionPane.showMessageDialog(this, "Done", "Processing finished", JOptionPane.INFORMATION_MESSAGE);

   }//GEN-LAST:event_grpScenarios__jButActionPerformed

   private void aggrRpts__jButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggrRpts__jButActionPerformed

       final Set statsTitles = new TreeSet<>(statTitlesFilter__jList.getSelectedValuesList());
       //<editor-fold defaultstate="collapsed" desc="chose results file">
       JFileChooser jchosser = selectFiles(
               DEFAULT_STATS_PATH, false, "Aggregate Same Scenario Repeats.", "Aggregate");
       if (jchosser == null) {
           return; // if aborted by user
       }
       File[] selectedFiles = jchosser.getSelectedFiles();

       /*pre-parsed results will be groupped together based on the top-most 
       (aka root) common directory*/
       List<File[]> grpedResultsPerRootDir = new ArrayList<>();

       for (File nxtFileOrDir : selectedFiles) {

           // next file or dir must be passed in a list form to method separateResFilesFromResDirs
           List<File> resultsFilesStandAlone = new ArrayList<>();
           List<File> nxtFileOrDirList = new ArrayList<>();
           nxtFileOrDirList.add(nxtFileOrDir);

           separateResFilesFromResDirs(nxtFileOrDirList, resultsFilesStandAlone);

           if (resultsFilesStandAlone.size() > 0) {
               grpedResultsPerRootDir.add(resultsFilesStandAlone.toArray(new File[resultsFilesStandAlone.size()]));
           }
       }
//</editor-fold>

       for (final File[] grpdResFiles : grpedResultsPerRootDir) {
           Runnable runnable = new Runnable() {
               public void run() {
                   String path = null;
                   try {
                       ResultsFile[] resultsFiless
                               = parseResultsFiles(statsTitles, grpdResFiles,
                                       transientStat__jRad.isSelected(),
                                       Integer.parseInt(skipUntilTimeTextField.getText()));

                       //<editor-fold defaultstate="collapsed" desc="create aggrResults__FileName">
                       /*
                   * Parent path:   The same as with the partent directory of first file from the selected files.
                        */
                       String aggrResults__parentPath = grpdResFiles[0].getParentFile().getParentFile().getCanonicalPath();

                       /*
                   * aggrResults__FileName:     Constructed after the titles included in statTitlesFilter
                        */
                       String statsIncluded = CommonFunctions.toString("", "", "", "_", statsTitles);
                       statsIncluded = statsIncluded.length() > 20 ? statsIncluded.substring(0, 20) : statsIncluded;
                       String aggrResults__FileName
                               = grpdResFiles[0].getParentFile().getParentFile().getName() + "_"
                               + grpdResFiles[0].getParentFile().getName() + "_"
                               //                        + statsTitles.toString().hashCode()
                               + "_"
                               + statsIncluded;
                       if (!autoOutput__jToggleBut.isSelected()) {
                           String ans = JOptionPane.showInputDialog(MainFrame.this, "Chose name for output file", aggrResults__FileName);
                           if (ans != null) {
                               aggrResults__FileName = ans;// asks use
                           } else {
                               return;
                           }
                       }

                       aggrResults__FileName += ".csv";
                       //</editor-fold>

                       //<editor-fold defaultstate="collapsed" desc="confidence interval selection">
                       Statistics.ConfidenceInterval confidenceInterval;
                       if (conf_aks__jToggle.isSelected()) {
                           confidenceInterval = chooseConfidenceInterval(); // asks use
                       } else if (conf_none__jToggle.isSelected()) {
                           confidenceInterval = Statistics.ConfidenceInterval.NONE; // asks use
                       } else {
                           confidenceInterval = Statistics.ConfidenceInterval.Percentile_95;
                       }
                       //</editor-fold>

                       path = aggrResults__parentPath + "/" + aggrResults__FileName;
                       aggrRpts(statsTitles, resultsFiless, path, transientStat__jRad.isSelected(),
                               mean__jToggle.isSelected(), stdev__jToggle.isSelected(), confidenceInterval);
                   } catch (IOException | HeadlessException | StatisticException ex) {
                       Logger.getGlobal().log(Level.SEVERE, null, ex);
                   }
                   //<editor-fold defaultstate="collapsed" desc="inform user about results path. ask to show spreadsheet">
                   String msg = "Repeats aggregated to \"" + path + "\"."
                           + "\nStatistics used: " + CommonFunctions.toString(statsTitles);

                   if (autoOpen__jToggleBut.isSelected()) {
                       try {
                           // if not canceled, then launch in excel
                           Desktop.getDesktop().open(new File(path));
                       } catch (IOException ex) {
                           Logger.getGlobal().log(Level.SEVERE, null, ex);
                       }
                   }
//</editor-fold>
               }
           };

           new Thread(runnable).run();

       }//for

       JOptionPane.showMessageDialog(this, "Done", "Processing finished", JOptionPane.INFORMATION_MESSAGE);


   }//GEN-LAST:event_aggrRpts__jButActionPerformed

    /**
     * Separates stand-alone result files from directories of result files.
     *
     * @param selectedFiles
     * @param resultsFilesPerDir
     * @param resultsFilesStandAlone
     * @throws HeadlessException
     */
    private void separateResFilesFromResDirs(List<File> selectedFiles,
            List<File> resultsFilesStandAlone) throws HeadlessException {

        // which ones in case of recursion needed
        List<File> selectedFilesForRecursiveCall = new ArrayList<>();
        // which folders to avoid
        String avoidFolderPrefix = aggrStat__jRad.isSelected() ? "trn" : "agg";

        for (File file : selectedFiles) {
            if (file.isFile()) {
                if (file.getName().endsWith(".csv")) {
                    resultsFilesStandAlone.add(file);
                }
                continue;
            }

            /**
             * ******************************************************************************
             *   ********** *********** otherwise it is a directory ***********
             * ***********
             * ******************************************************************************
             */
            File[] subFoldersOrFiles = file.listFiles();

            // check empty directory of files
            if (subFoldersOrFiles.length == 0) {
                try {
                    JOptionPane.showMessageDialog(
                            null, "WARNING!",
                            "Directory " + file.getCanonicalPath()
                            + " is empty and will be ignored",
                            JOptionPane.WARNING_MESSAGE);
                    continue;
                } catch (IOException ex) {
                    Logger.getGlobal().log(Level.SEVERE, null, ex);
                }
            }

            if (!file.getName().startsWith(avoidFolderPrefix)) {
                selectedFilesForRecursiveCall.addAll(
                        Arrays.asList(file.listFiles()));
            }

//         /*else*/
//
//         if (!file.getName().startsWith(avoidFolderPrefix)) {
//            for (File subFolderFile : subFoldersOrFiles) {
//               if (subFolderFile.isFile()) {
//                  if (!subFolderFile.getName().endsWith(".csv")) {
//                     Logger.getLogger(MainFrame.class.getName()).log(Level.WARNING,
//                           "File not recognised by name suffix as a csv results file and "
//                           + "will be ignored: "
//                           + subFolderFile.getName()
//                     );
//                     continue;
//                  }
//                  resultsFilesStandAlone.add(subFolderFile);
//                  
//               }
//
//               // otherwiese if subFolderFile is directory
//               if (subFolderFile.isDirectory() && !subFolderFile.getName().startsWith(avoidFolderPrefix)) {
//                  selectedFilesForRecursiveCall.addAll(
//                        Arrays.asList(subFolderFile.listFiles()));
//               } else if (subFolderFile.isDirectory()) {
////                  selectedFilesForRecursiveCall.add(subFolderFile);
//                  Logger.getLogger(MainFrame.class.getName()).log(Level.WARNING,
//                        "Directory {0}" + " not recognised by name prefix"
//                        + " and will be ignored"
//                  , subFolderFile.getName());
//                  continue;
//               }
//            }
//         }
        }

        if (!selectedFilesForRecursiveCall.isEmpty()) {
            // recursive call
            separateResFilesFromResDirs(selectedFilesForRecursiveCall,
                    resultsFilesStandAlone);
        }

        System.out.println("\n\n");
    }

   private void statTitlesRemove_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statTitlesRemove_jButtonActionPerformed
       DefaultListModel model = (DefaultListModel) statTitlesFilter__jList.getModel();
       int[] selectedIndices = statTitlesFilter__jList.getSelectedIndices();
       try {
           model.removeRange(selectedIndices[0], selectedIndices[selectedIndices.length - 1]);
       } catch (Exception e) {
           Logger.getLogger(model.getClass().getCanonicalName()).log(Level.WARNING,
                   "While trying to remove statistics title from jList: \n\t thrown {0}\n\t msg: {1}",
                   new Object[]{
                       e.getClass().getCanonicalName(), e.getMessage()
                   });
       }
   }//GEN-LAST:event_statTitlesRemove_jButtonActionPerformed

   private void statTitleAdd__jtextfiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statTitleAdd__jtextfiledActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_statTitleAdd__jtextfiledActionPerformed

   private void statTitlesAdd_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statTitlesAdd_jButtonActionPerformed
       DefaultListModel model = (DefaultListModel) statTitlesFilter__jList.getModel();
       String addTitle = statTitleAdd__jtextfiled.getText();
       model.addElement(addTitle);
   }//GEN-LAST:event_statTitlesAdd_jButtonActionPerformed

   private void ignoredParamAdd_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoredParamAdd_jButtonActionPerformed
       DefaultListModel model = (DefaultListModel) ignoredParams__jList.getModel();
       String addTitle = ignoredParamAdd__jtextfiled.getText();
       model.addElement(addTitle);
   }//GEN-LAST:event_ignoredParamAdd_jButtonActionPerformed

   private void ignoredParamAdd__jtextfiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoredParamAdd__jtextfiledActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_ignoredParamAdd__jtextfiledActionPerformed

   private void ignoredParamRemove_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoredParamRemove_jButtonActionPerformed
       DefaultListModel model = (DefaultListModel) ignoredParams__jList.getModel();
       int[] selectedIndices = ignoredParams__jList.getSelectedIndices();
       try {
           model.removeRange(selectedIndices[0], selectedIndices[selectedIndices.length - 1]);
       } catch (Exception e) {
           Logger.getLogger(model.getClass().getCanonicalName()).log(Level.WARNING, "While trying to remove ignored parameters from jList: \n\t thrown {0}\n\t msg: {1}",
                   new Object[]{
                       e.getClass().getCanonicalName(), e.getMessage()
                   });
       }
   }//GEN-LAST:event_ignoredParamRemove_jButtonActionPerformed

   private void transientStat__jRadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transientStat__jRadActionPerformed
       skipUntilTimeTextField.setEnabled(true);
       skipUntilTimeLbl.setEnabled(true);
   }//GEN-LAST:event_transientStat__jRadActionPerformed

   private void aggrStat__jRadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggrStat__jRadActionPerformed
       skipUntilTimeTextField.setEnabled(false);
       skipUntilTimeLbl.setEnabled(false);
   }//GEN-LAST:event_aggrStat__jRadActionPerformed

   private void mean__jToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mean__jToggleActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_mean__jToggleActionPerformed

   private void stdev__jToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdev__jToggleActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_stdev__jToggleActionPerformed

   private void conf_95__jToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conf_95__jToggleActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_conf_95__jToggleActionPerformed

   private void conf_aks__jToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conf_aks__jToggleActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_conf_aks__jToggleActionPerformed

   private void conf_none__jToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conf_none__jToggleActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_conf_none__jToggleActionPerformed

   private void autoOutput__jToggleButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoOutput__jToggleButActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_autoOutput__jToggleButActionPerformed

   private void autoOpen__jToggleButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoOpen__jToggleButActionPerformed
       // TODO add your handling code here:
   }//GEN-LAST:event_autoOpen__jToggleButActionPerformed

    private void skipUntilTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipUntilTimeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skipUntilTimeTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Logger.getGlobal().setLevel(Level.ALL);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getGlobal().log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getGlobal().log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getGlobal().log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getGlobal().log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame frame = new MainFrame();

                Dimension screenDimentions = Toolkit.getDefaultToolkit().getScreenSize();
                int posX = screenDimentions.width - frame.getWidth();
                posX /= 2;
                int posY = screenDimentions.height - frame.getHeight();
                posY /= 2;
                frame.setLocation(posX, posY);
                frame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aggrRpts__jBut;
    private javax.swing.JPanel aggrRpts_pnl;
    private javax.swing.JRadioButton aggrStat__jRad;
    private javax.swing.JToggleButton autoOpen__jToggleBut;
    private javax.swing.JToggleButton autoOutput__jToggleBut;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JToggleButton conf_95__jToggle;
    private javax.swing.JToggleButton conf_aks__jToggle;
    private javax.swing.JToggleButton conf_none__jToggle;
    private javax.swing.JPanel fileTypes_pnl;
    private javax.swing.JButton grpScenarios__jBut;
    private javax.swing.JTextField ignoredParamAdd__jtextfiled;
    private javax.swing.JButton ignoredParamAdd_jButton;
    private javax.swing.JButton ignoredParamRemove_jButton;
    private javax.swing.JList ignoredParams__jList;
    private javax.swing.JPanel iterativeMUTitlesPanel;
    private javax.swing.JPanel iterativeMUTitlesPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JToggleButton mean__jToggle;
    private javax.swing.JLabel skipUntilTimeLbl;
    private javax.swing.JTextField skipUntilTimeTextField;
    private javax.swing.JTextField statTitleAdd__jtextfiled;
    private javax.swing.JButton statTitlesAdd_jButton;
    private javax.swing.JList statTitlesFilter__jList;
    private javax.swing.JButton statTitlesRemove_jButton;
    private javax.swing.JToggleButton stdev__jToggle;
    private javax.swing.JRadioButton transientStat__jRad;
    // End of variables declaration//GEN-END:variables
}
