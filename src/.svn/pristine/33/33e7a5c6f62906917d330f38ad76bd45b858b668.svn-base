package sim.content.request;

import caching.base.AbstractCachingPolicy;
import java.util.List;
import java.util.Map;
import sim.content.Chunk;
import sim.space.users.User;
import util.Couple;

/**
 *
 * @author xvas
 */
public interface IRequest {

    /**
     *
     * Predicts the chunks that will be requested along with a tuned probability 
     * per chunk. If the chunk is predicted to be requested, then the the handover 
     * probability is used. If not, then the probability is tuned such that the
     * less likely to be requested chunks get a proportionally less probability
     * to be requested.
     * 
     * @param handoverProb
     * @param expectedHandoffDuration
     * @param handDurError
     * @param expectedResidenceDuration
     * @param resiDurError
     * @param mcRateSliceBytes
     * @param bhRateSliceBytes
     * @param scRateSliceBytes
     * @return the chunks along with a tuned probability per chunk. 
     */
    public Map<Chunk, Double> predictChunksToCache(
            double handoverProb,
            double expectedHandoffDuration, double handDurError,
            double expectedResidenceDuration, double resiDurError,
            int mcRateSliceBytes, int bhRateSliceBytes,
            int scRateSliceBytes);

    void consumeChunks(double mcRateSlice, Map<AbstractCachingPolicy, List<Chunk>> fillInWithDownloadedFromMC, double scRateSlice, Map<AbstractCachingPolicy, List<Chunk>> fillInWithCacheHits, double minSCorBHRateSlice, Map<AbstractCachingPolicy, List<Chunk>> fillInWithDownloadedFromBH, Map<AbstractCachingPolicy, List<Chunk>> fillInWithMissedPerPolicy);

    @Override
    boolean equals(Object obj);

    List<Chunk> getChunksCacheHitsHistory(AbstractCachingPolicy policy);

    Map<AbstractCachingPolicy, List<Chunk>> getChunksConsumedHistoryFromBH();

    List<Chunk> getChunksConsumedHistoryFromBH(AbstractCachingPolicy policy);

    Map<AbstractCachingPolicy, List<Chunk>> getChunksConsumedHistoryFromMC();

    List<Chunk> getChunksConsumedHistoryFromMC(AbstractCachingPolicy policy);

    List<Chunk> getChunksConsumedHistoryFromMCWhenDisconnected(AbstractCachingPolicy policy);

    int getIssuedAtSimTime();

    User getRequesterUser();

    @Override
    int hashCode();

    long requesterUserID();

}
