package stats.gainstats.gains;

import caching.base.AbstractCachingPolicy;
import java.util.Iterator;
import java.util.List;
import sim.content.request.DocumentRequest;
import sim.content.Chunk;
import sim.space.cell.smallcell.SmallCell;
import sim.space.users.CachingUser;
import stats.StatisticException;
import stats.handlers.AbstractGainStat;

/**
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public class GAIN_BH extends AbstractGainStat<CachingUser, SmallCell> implements IBelognsToBroaderCategory {

    public GAIN_BH(AbstractCachingPolicy cachingMethod) {
        super(cachingMethod);
    }

    @Override
    public final double compute2(CachingUser user) throws StatisticException {
        double gainSum = 0;

        Iterator<DocumentRequest> iterator = user.getRequests().iterator();
        while (iterator.hasNext()) {
            DocumentRequest nxtRequest = iterator.next();
            List<Chunk> consumedChunksFromBH = nxtRequest.getChunksConsumedHistoryFromBH(_cachingPolicy);
            gainSum += consumedChunksFromBH.size() * nxtRequest.gainOfTransferSCThroughBH();
        }

        return gainSum;
    }

    @Override
    public String title() {
        return "G_BH(" + _cachingPolicy.toString().substring(8) + ")";
    }

    @Override
    public String titleBroaderCategory() {
        return "G(" + _cachingPolicy.toString().substring(8) + ")";
    }
}
