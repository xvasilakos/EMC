package sim.run;

import sim.Scenario;
import app.properties.Space;
import app.properties.valid.Values;
import caching.base.AbstractCachingPolicy;
import caching.interfaces.rplc.IGainRplc;
import exceptions.CriticalFailureException;
import exceptions.InconsistencyException;
import exceptions.TraceEndedException;
import exceptions.WrongOrImproperArgumentException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.logging.Level;
import sim.space.Area;
import sim.space.Point;
import sim.space.cell.CellRegistry;
import sim.space.cell.smallcell.SmallCell;
import sim.time.NormalSimulationEndException;
import sim.space.users.StationaryUser;
import sim.space.users.mobile.MobileGroup;
import sim.space.users.mobile.MobileGroupsRegistry;
import sim.space.users.mobile.MobileUser;
import sim.space.users.mobile.TraceMU;
import sim.space.users.mobile.TraceMUBuilder;
import statistics.StatisticException;
import statistics.handlers.iterative.sc.cmpt6.UnonymousCompute6;
import utils.CommonFunctions;
import utils.DebugTool;

/**
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public final class TraceMUSimulation extends SimulationBaseRunner<TraceMU> {

    private BufferedReader _muTraceIn;
    private String _mubinLine;

    private Map<Integer, TraceMU> _muByID;
    private Map<Integer, TraceMU> _muImmobileByID;
    private Map<Integer, TraceMU> _muMovingByID;
    private double _muAvgVelocity;

    public TraceMUSimulation(Scenario s) {
        super(s);
    }

    @Override
    protected void constructorInit(Scenario scenario) {
        String mutracePath = scenario.stringProperty(Space.MU__TRACE);
        try {
            _muTraceIn = new BufferedReader(new FileReader(mutracePath));
            _mubinLine = _muTraceIn.readLine();
        } catch (IOException ioe) {
            throw new CriticalFailureException(ioe);
        }
    }

    private void updateTraceMU() throws IOException, NumberFormatException,
            InconsistencyException, StatisticException, TraceEndedException {
        int simTime = _clock.simTime();

        int switched2moving = 0;

        while (_mubinLine != null) {
            String[] csv = _mubinLine.split(",");
            if (csv[0].startsWith("#") //                    || csv[0].startsWith("TIME")//xxx tmp hack
                    ) {
                _mubinLine = _muTraceIn.readLine();
                continue;
            }
            if (Integer.parseInt(csv[0]) > simTime) {
                break;
            }

            int muId = Integer.parseInt(csv[1]);
            double dxdt = Math.ceil(Double.parseDouble(csv[2]));
            double dydt = Math.ceil(Double.parseDouble(csv[3]));

            TraceMU nxtMU = _muByID.get(muId);

            double prevDx = nxtMU.getDx();
            double prevDy = nxtMU.getDy();
            _muAvgVelocity -= Math.sqrt(prevDx * prevDx + prevDy * prevDy) / _muByID.size();

            nxtMU.setDx(dxdt);
            nxtMU.setDy(dydt);
            _muAvgVelocity += Math.sqrt(dxdt * dxdt + dydt * dydt) / _muByID.size();

            if (dxdt == dydt && dxdt == 0) {// if immobile in this round
                if (_muMovingByID.containsKey(muId)) {// if need to change its mobility status
                    _muMovingByID.remove(muId);
                    _muImmobileByID.put(muId, nxtMU);
                }
            } else if (_muImmobileByID.containsKey(muId)) {// if it were previously immobile
                switched2moving++;
                _muImmobileByID.remove(muId);
                _muMovingByID.put(muId, nxtMU);
            }
            _mubinLine = _muTraceIn.readLine();
        }

        if (_mubinLine == null) {
            throw new TraceEndedException("The mobility trace has ended.");
        }

        if (getStatsHandle() != null) {
            getStatsHandle().updtSCCmpt6(switched2moving, new UnonymousCompute6("switched2moving"));
        }

    }

    /**
     * Initializes mobile users on the setArea.
     *
     * @param scenario
     * @param ugReg
     * @param area
     * @param scReg
     * @param cachingPolicies
     * @return
     */
    @Override
    protected List<TraceMU> initAndConnectMUs(
            Scenario scenario, MobileGroupsRegistry ugReg,
            Area area, CellRegistry scReg,
            Iterable<AbstractCachingPolicy> cachingPolicies
    ) {

        /*
         * Necessary check. With traces of user mobility, you may only have one\
         * group of users (at least in this simulator version). 
         */
        SortedMap<Integer, MobileGroup> groupsMap = ugReg.registeredGroups();
        if (groupsMap.size() != 1) {
            throw new CriticalFailureException(
                    new WrongOrImproperArgumentException(
                            "Mobile user type " + TraceMU.class.getCanonicalName()
                            + " must be used with one and only one group of mobile users."
                    ));
        }
        MobileGroup nxtGroup = groupsMap.get(groupsMap.firstKey());

        List<String> conn2SCPolicy;
        conn2SCPolicy = scenario.parseConnPolicySC();
        String mobTransDecisions = scenario.stringProperty(Space.MU__TRANSITION_DECISIONS);
        double percentage = scenario.doubleProperty(app.properties.Simulation.PROGRESS_UPDATE);

        _muByID = new HashMap();
        _muImmobileByID = new HashMap();
        _muMovingByID = new HashMap();

        List<TraceMU> musLst = new ArrayList<>();

        String metaPath = scenario.stringProperty(Space.MU__TRACE__META);

        if (!metaPath.equalsIgnoreCase(Values.NONE)) {
            initAndConnectMUs_1(metaPath, percentage, area, nxtGroup,
                    conn2SCPolicy, cachingPolicies, mobTransDecisions,
                    musLst);
        } else {// Makes a first full parse of the mobility trace file to discover meta data.
            initAndConnectMUs_2(percentage, area, nxtGroup,
                    conn2SCPolicy, cachingPolicies, mobTransDecisions,
                    musLst, scenario);
        }

        //<editor-fold defaultstate="collapsed" desc="shuffle mus iff property ..">
        String muShuffling = scenario.stringProperty(Space.MU__SHUFFLE);
        switch (muShuffling) {
            case Values.NEVER:
                break; // do not shufle

            case Values.UPON_CREATION:
            case Values.ALWAYS:
                Collections.shuffle(musLst, getRandomGenerator().getMersenneTwister());
                break;
            default:
                throw new UnsupportedOperationException("Value " + muShuffling + " is currently not supported for "
                        + " property " + Space.MU__SHUFFLE);
        }
        //</editor-fold>

        return musLst;
    }

    private void initAndConnectMUs_1(String metaDataPath,
            double percentage, Area area, MobileGroup nxtGroup,
            List<String> conn2SCPolicy, Iterable<AbstractCachingPolicy> cachingPolicies,
            String mobTransDecisions, List<TraceMU> musLst)
            throws CriticalFailureException, InconsistencyException, NumberFormatException {

        String lineCSV;
        try (BufferedReader metaIn = new BufferedReader(new FileReader(metaDataPath))) {
            int musNum = -1;

            while ((lineCSV = metaIn.readLine()) != null) {

                if (lineCSV.toUpperCase().startsWith("#NUM")) {
                    String[] csv = lineCSV.split(",");
                    musNum = Integer.parseInt(csv[1]);
                    continue;
                }

                if (lineCSV.startsWith("#")) {
                    continue;
                }

                break;
            }

            _logger.log(Level.INFO,
                    "Initializing MUs on the area:\n\t{0}/{1}", new Object[]{0, musNum});
            int count = 0;
            int printPer = (int) (musNum * percentage);
            printPer = printPer == 0 ? 1 : printPer; // otherwise causes arithmetic exception devide by zero in some cases

            do {

                String[] csv = lineCSV.split(",");

                int nxtMuID = Integer.parseInt(csv[0]);
//ignore these, zero init velocities for all mobiles                double avgdxdt = Double.parseDouble(csv[4]);
//                double avgdydt = Double.parseDouble(csv[6]);

//<editor-fold defaultstate="collapsed" desc="nxtMUBuilder">
                Point startPoint = area.getPoint(nxtGroup.getInitPos());

                TraceMUBuilder nxtMUBuilder = new TraceMUBuilder(
                        this, nxtGroup, startPoint,
                        conn2SCPolicy, cachingPolicies, 0, 0
                );

                nxtMUBuilder.setId(nxtMuID);

                nxtMUBuilder.setArea(area);

                nxtMUBuilder.setTransitionDecisions(mobTransDecisions);

                TraceMU mu = nxtMUBuilder.build();
//</editor-fold>

                musLst.add(mu);
                int id = mu.getID();

                _muByID.put(id, mu);
                _muImmobileByID.put(id, mu);
                _muAvgVelocity = 0.5;//gia xazh arxikopoihsh, kata imisi to plh8os twn xrhstwn

//<editor-fold defaultstate="collapsed" desc="report/log progress">
                if (++count % 100 == 0 || count % printPer == 0) {
                    _logger.log(Level.INFO, "\tMobiles prepared: {0} "
                            + "out of {1}, i.e: {2}%",
                            new Object[]{
                                count, musNum,
                                Math.round(10000.0 * count / musNum) / 100.0
                            });
                }
//</editor-fold>
            } while ((lineCSV = metaIn.readLine()) != null);//for every MU__CLASS in group
        } catch (IOException ex) {
            throw new CriticalFailureException(ex);
        }

        try {
            updateTraceMU();
        } catch (IOException | StatisticException ex) {
            throw new CriticalFailureException(ex);
        } catch (TraceEndedException ex) {
            throw new CriticalFailureException("Trace ended too early during intiallization of mobiles", ex);
        }
    }

    /**
     * Makes a first full parse of the mobility trace file to discover meta
     * data.
     *
     * @param percentage
     * @param area
     * @param nxtGroup
     * @param conn2SCPolicy
     * @param cachingPolicies
     * @param mobTransDecisions
     * @param musLst
     * @param scenario
     * @throws CriticalFailureException
     * @throws InconsistencyException
     * @throws NumberFormatException
     */
    private void initAndConnectMUs_2(
            double percentage, Area area, MobileGroup nxtGroup,
            List<String> conn2SCPolicy, Iterable<AbstractCachingPolicy> cachingPolicies,
            String mobTransDecisions, List<TraceMU> musLst, Scenario scenario)
            throws CriticalFailureException, InconsistencyException, NumberFormatException {

        String mutracePath = scenario.stringProperty(Space.MU__TRACE);
        String lineCSV;

        int musNum = 0;
        SortedSet<Integer> ids = new TreeSet<>();
        try (BufferedReader bin = new BufferedReader(new FileReader(mutracePath))) {

            while ((lineCSV = bin.readLine()) != null) {

                if (lineCSV.startsWith("#")) {
                    continue;
                }

                String[] csv = lineCSV.split(",");
                int nxtMuID = Integer.parseInt(csv[1]);

                if (ids.add(nxtMuID)) {
                    musNum++;
                }
            }
        } catch (IOException ex) {
//            _logger.log(Level.SEVERE, null, ex);
            throw new CriticalFailureException(ex);
        }


        _logger.log(Level.INFO,
                "Initializing MUs on the area:\n\t{0}/{1}", new Object[]{0, musNum});

        int count = 0;
        int printPer = (int) (musNum * percentage);
        printPer = printPer == 0 ? 1 : printPer; // otherwise causes arithmetic exception devide by zero in some cases

        for (int nxtMuID : ids) {

//<editor-fold defaultstate="collapsed" desc="nxtMUBuilder">
            Point startPoint = area.getPoint(nxtGroup.getInitPos());

            TraceMUBuilder nxtMUBuilder = new TraceMUBuilder(
                    this, nxtGroup, startPoint,
                    conn2SCPolicy, cachingPolicies, 0, 0
            );

            nxtMUBuilder.setId(nxtMuID);

            nxtMUBuilder.setArea(area);

            nxtMUBuilder.setTransitionDecisions(mobTransDecisions);

            TraceMU mu = nxtMUBuilder.build();
//</editor-fold>

            musLst.add(mu);
            int id = mu.getID();

            _muByID.put(id, mu);
            _muImmobileByID.put(id, mu);
            _muAvgVelocity = 0.5;//gia xazh arxikopoihsh, kata imisi to plh8os twn xrhstwn

//<editor-fold defaultstate="collapsed" desc="report/log progress">
            if (++count % 100 == 0 || count % printPer == 0) {
                _logger.log(Level.INFO, "\tMobiles prepared: {0} "
                        + "out of {1}, i.e: {2}%",
                        new Object[]{
                            count, musNum,
                            Math.round(10000.0 * count / musNum) / 100.0
                        });
            }
//</editor-fold>
        }

        try {
            updateTraceMU();
        } catch (IOException | StatisticException ex) {
            throw new CriticalFailureException(ex);
        } catch (TraceEndedException ex) {
            throw new CriticalFailureException("Trace ended too early during intiallization of mobiles", ex);
        }

    }

    @Override
    @SuppressWarnings("empty-statement")
    public void run() {

        try {

            while (!Thread.currentThread().isInterrupted()
                    && isDuringWarmupPeriod(getTrcLoader())) {
                _clock.tick();

                try {
                    updateTraceMU();
                } catch (TraceEndedException tee) {
                    throw new NormalSimulationEndException(tee);
                }
            };

            /*
             * if warmup period has passed..
             */
            WHILE_THREAD_NOT_INTERUPTED:
            while (!Thread.currentThread().isInterrupted()) {
                _clock.tick();

                try {
                    updateTraceMU();
                } catch (TraceEndedException tee) {
                    throw new NormalSimulationEndException(tee);
                }

//////////////////////////////////////////////////                
//yyy                runGoldenRatioSearchEMPCLC();
//////////////////////////////////////////////////
                if (stationaryRequestsUsed()) {/*
                     * Concume data and keep gain stats for stationary users
                     */
                    for (SmallCell nxtSC : smallCells()) {
                        StationaryUser nxtSU = nxtSC.getStationaryUser();
                        nxtSU.consumeData(1);
                        nxtSC.updtLclDmdByStationary(false);
                    }
                }

/////////////////////////////////////
                List<TraceMU> shuffldMUs = shuffledMUs();
                _haveExitedPrevCell.clear();
                getStatsHandle().resetHandoverscount();

                for (TraceMU nxtMU : shuffldMUs) {
                    if (_muImmobileByID.containsKey(nxtMU.getID())) {
                        nxtMU.consumeData(1);// consume in one simulation time step
                        continue;
                    }
                    nxtMU.move(false, false);
                    nxtMU.consumeData(1);// consume in one simulation time step
                }// for all all MUs

                getStatsHandle().statHandoversCount();
/////////////////////////////////////

                for (AbstractCachingPolicy nxtPolicy : _cachingPolicies) {/*
                     * update priority queues of cached chunks for each
                     * IGainRplc replacement policy, in every small cell.
                     */
                    if (!(nxtPolicy instanceof IGainRplc)) {
                        continue;
                    }
                    IGainRplc gainRplcPolicy = (IGainRplc) nxtPolicy;
                    for (SmallCell sc : smallCells()) {
                        sc.updtCachedChunksOrderedByGain(gainRplcPolicy);
                    }
                }

                /////////////////////////////////////////////////    
                int clearedReqs = 0;
                int newAddedReqs = 0;
                for (MobileUser nxtMU : _haveExitedPrevCell) {
                    SmallCell lastSCForCacheDecisions = nxtMU.getLastSCForCacheDecisions();
                    if (lastSCForCacheDecisions != null) {
                        getStatsHandle().updtPerformanceStats(nxtMU);
                        // cancel past PC decisions
                        nxtMU.cancelAndDeregisterPCOrders();
                    }

                    if (usesTraceOfRequests()) {
                        clearedReqs += nxtMU.clearCompletedRequests();
                        newAddedReqs += updtWithNewWorkloadRequests(nxtMU, _dmdTrcReqsLoadedPerUser);
                    }

                    // finaly take caching decisions
                    nxtMU.cacheDescisionsPerformRegisterPC(nxtMU.getLastKnownConnectedSC());
                }
                getStatsHandle().updtSCCmpt6(clearedReqs,
                        new UnonymousCompute6(new UnonymousCompute6.WellKnownTitle("ClearedReqs"))
                );
                getStatsHandle().updtSCCmpt6(newAddedReqs,
                        new UnonymousCompute6(new UnonymousCompute6.WellKnownTitle("newAddedReqs"))
                );

                ////////////////////////////////////////////////////
                boolean roundCommited = runUpdtStats4SimRound();
                if (roundCommited) {
                    getStatsHandle().appendTransient(false);
                    getStatsHandle().checkFlushTransient(false);
                }
            }// while simulation continues// while simulation continues// while simulation continues// while simulation continues// while simulation continues// while simulation continues// while simulation continues// while simulation continues

        } catch (NormalSimulationEndException simEndEx) {
            _logger.log(Level.INFO, "Simulation {0} ended: {1}",
                    new Object[]{
                        Thread.currentThread().getName(),
                        simEndEx.getMessage()
                    });
        } catch (Throwable ex) {
            _logger.log(Level.SEVERE, "Simulation " + getID()
                    + " terminates unsuccessfully at time " + simTime(),
                    new CriticalFailureException(ex));
        } finally {
            runFinish();
        }
    }

    @Override
    protected boolean runUpdtStats4SimRound() throws StatisticException {
        if (!getStatsHandle().isStatsMinTimeExceeded()) {
            return false;
        }
        getStatsHandle().updtSCCmpt6(
                _muAvgVelocity,
                new UnonymousCompute6(
                        new UnonymousCompute6.WellKnownTitle("AVGSpeed")
                )
        );
        getStatsHandle().updtSCCmpt6(
                _muAvgVelocity * _muByID.size() / _muMovingByID.size(),
                new UnonymousCompute6(
                        new UnonymousCompute6.WellKnownTitle("AVGSpeed[no immobile]")
                )
        );
        getStatsHandle().updtSCCmpt6(
                _muImmobileByID.size(),
                new UnonymousCompute6(
                        new UnonymousCompute6.WellKnownTitle("n_Immobile")
                )
        );

        return super.runUpdtStats4SimRound();
    }

    @Override
    public void runFinish() {
        super.runFinish();
        try {
            _muTraceIn.close();
        } catch (IOException ex) {
            _logger.log(Level.SEVERE, null, ex);
        }
    }

}
