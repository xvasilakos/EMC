package sim.content.request;

import caching.base.AbstractCachingPolicy;
import java.util.List;
import java.util.Map;
import sim.content.Chunk;
import sim.space.users.User;

/**
 *
 * @author xvas
 */
public interface IRequest {

    /**
     *
     * Predicts the chunks that will be requested along with a tuned probability
     * per chunk. If the chunk is predicted to be requested, then the the
     * handover probability is used. If not, then the probability is tuned such
     * that the less likely to be requested chunks get a proportionally less
     * probability to be requested.
     *
     * @param handoverProb
     * @param expectedHandoffDuration
     * @param conf95HandoffDur
     * @param expectedResidenceDuration
     * @param conf95ResidenceDur
     * @param mcRateSliceBytes
     * @param bhRateSliceBytes
     * @param scRateSliceBytes
     * @return the chunks along with a tuned probability per chunk.
     */
    public Map<Chunk, Double> predictChunks(  double handoverProb,
            double expectedHandoffDuration, double conf95HandoffDur, 
            double expectedResidenceDuration, double conf95ResidenceDur,  
            int mcRateSliceBytes, int bhRateSliceBytes, int scRateSliceBytes);

    /**
     * Consumes for each caching policy the remainder chunks.
     *
     * @param mcRateSlice
     * @param fillInWithDownloadedFromMC
     *
     */
    void consumeChunksRemainderFromMC(double mcRateSlice,
            Map<AbstractCachingPolicy, List<Chunk>> fillInWithDownloadedFromMC);

    void consumeChunks(double mcRateSlice, Map<AbstractCachingPolicy, List<Chunk>> fillInWithDownloadedFromMC,
            double scRateSlice, Map<AbstractCachingPolicy, List<Chunk>> fillInWithCacheHits,
            double minSCorBHRateSlice, Map<AbstractCachingPolicy, List<Chunk>> fillInWithDownloadedFromBH,
            Map<AbstractCachingPolicy, List<Chunk>> fillInWithMissedPerPolicy);

    @Override
    boolean equals(Object obj);

    List<Chunk> getChunksCacheHitsHistory(AbstractCachingPolicy policy);

    Map<AbstractCachingPolicy, List<Chunk>> getChunksConsumedHistoryFromBH();

    List<Chunk> getChunksConsumedHistoryFromBH(AbstractCachingPolicy policy);

    Map<AbstractCachingPolicy, List<Chunk>> getChunksConsumedHistoryFromMCWhileConnectedToSC();

    List<Chunk> getChunksConsumedHistoryFromMCWhileConnectedToSC(AbstractCachingPolicy policy);

    List<Chunk> getChunksConsumedHistoryFromMCBeforeEnteringSC(AbstractCachingPolicy policy);

    List<Chunk> getChunksConsumedHistoryFromMCAfterExitingSC(AbstractCachingPolicy policy);

    int getIssuedAtSimTime();

    User getRequesterUser();

    @Override
    int hashCode();

    long requesterUserID();

}
