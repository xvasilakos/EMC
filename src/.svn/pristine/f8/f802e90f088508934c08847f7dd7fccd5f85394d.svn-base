package util;

import app.SimulatorApp;
import caching.base.AbstractCachingPolicy;
import caching.base.AbstractGainRplc_Priced;
import caching.incremental.EMC;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import sim.space.cell.smallcell.SmallCell;
import sim.space.users.CachingUser;
import sim.space.users.User;

/**
 *
 * @author xvas
 */
public class DebugUtils {

    public static PrintStream printer;//yyy

    static {
        try {
            SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");//dd/MM/yyyy
            Date now = new Date();
            String name = sdfDate.format(now) + ".txt";
            if (System.getProperty("os.name").equalsIgnoreCase("Linux")) {
//                printer = new PrintStream("/home/xvas/Dropbox/2014-2015-EPC+POP/trunk/files/results/-1-" + name);
                printer = new PrintStream(SimulatorApp.currentSimulationStatsDirPath() + "/meta-" + name);
            } else {
//                printer = new PrintStream("C:\\Users\\xvas\\Dropbox\\2014-2015-EPC+POP\\trunk\\files\\results\\-1-" + name);
                printer = new PrintStream(SimulatorApp.currentSimulationStatsDirPath() + "/meta-" + name);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(AbstractGainRplc_Priced.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private static final int monitorCell = -1;//  21;
    private static final AbstractCachingPolicy _policy = EMC.instance();//EPCPopNoRplc_c1.instance();

    public static void appendLogNewRecord(String txt, SmallCell sc, caching.base.AbstractCachingPolicy policy) {
        if ((sc.getID() == monitorCell || monitorCell == -1) && policy.getClass() == _policy.getClass()) {
            printer.append("\n\n[simTime=" + sc.simTime() + "]" + "\t" + txt);
        }
    }

    public static void trackUser(boolean newRec, String txt, User usr, boolean overrideMU) {
        if (usr.getID() == 60
                || overrideMU) {
            printer.append("\n**********\n");
            if (newRec) {
                printer.append(usr.simTimeStr());
                printer.append(" user: " + usr.getID());//toSynopsisString());
                printer.append("\n");
            }
            printer.append(txt);
        }
    }

    public static void trackSC(boolean newRec, String txt, SmallCell sc, boolean overrideSC) {
        if (sc.getID() == 13 || overrideSC) {
            printer.append("\n");
            if (newRec) {
                printer.append(sc.simTimeStr());
                printer.append("\n");
            }
            printer.append(txt);
        }
    }

    public static void trackUserOut(boolean newRec, String txt, CachingUser usr, boolean overrideMU) {
        if (usr.getID() == 1
                //                || usr.getID() == 7
                //                || usr.getID() == 11
                || overrideMU) {
            try {
                System.out.append("\n");
                if (newRec) {
                    System.out.append(usr.simTimeStr());
                    System.out.append("\n");
                }
                System.out.append(txt);
                System.out.println();
                System.in.read();

            } catch (IOException ex) {

            }
        }
    }

    public static void trackSCOut(boolean newRec, String txt, SmallCell sc, boolean overrideSC) {
        if (sc.getID() == 13 || overrideSC) {
            try {
                System.out.append("\n");
                if (newRec) {
                    System.out.append(sc.simTimeStr());
                    System.out.append("\n");
                }
                System.out.append(txt);
                System.out.println();
                System.in.read();
            } catch (IOException ex) {

            }
        }

    }

    public static void appendLog(String txt, SmallCell sc, caching.base.AbstractCachingPolicy policy) {
        if ((sc.getID() == monitorCell || monitorCell == -1) && policy.getClass() == _policy.getClass()) {
            printer.append("\n\t" + txt);
        }
    }

    public static void appendLog(String txt, CachingUser mu) {
        if (mu.getID() == 7) {
            printer.append("\n\t" + txt);
        }
    }

    public static void flushLogs() {
        printer.flush();
//        printer2.flush();
    }

    public static void closeLogs() {
        printer.close();
//        printer2.close();
    }
}
