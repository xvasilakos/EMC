package stats.gainstats.gains;

import caching.base.AbstractCachingPolicy;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import sim.content.request.DocumentRequest;
import sim.content.Chunk;
import sim.space.cell.smallcell.SmallCell;
import sim.space.users.CachingUser;
import stats.StatisticException;
import stats.handlers.AbstractGainStat;

/**
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public class GAINPercent_BH extends AbstractGainStat<CachingUser, SmallCell, DocumentRequest> implements IBelongsToBroaderCategory {

    public GAINPercent_BH(AbstractCachingPolicy cachingMethod) {
        super(cachingMethod);
    }

    @Override
    public final double computeGain(CachingUser user, DocumentRequest nxtRequest) throws StatisticException {

//        List<Chunk> consumedChunksHitsHistory = nxtRequest.getChunksCacheHitsHistory(getCachingPolicy());
        List<Chunk> consumedChunksFromBH = nxtRequest.getChunksConsumedHistoryFromBH(getCachingPolicy());
//        List<Chunk> consumedChunksFromMC = nxtRequest.getChunksConsumedHistoryFromMCWhileConnectedToSC(getCachingPolicy());
//        List<Chunk> consumedChunksFromMCWhenDisconnected = new ArrayList<>();
//        consumedChunksFromMCWhenDisconnected.addAll(
//                nxtRequest.getChunksConsumedHistoryFromMCBeforeEnteringSC(getCachingPolicy()));
//        consumedChunksFromMCWhenDisconnected.addAll(
//                nxtRequest.getChunksConsumedHistoryFromMCAfterExitingSC(getCachingPolicy())
//        );

        double backhaul = nxtRequest.gainOfTransferSCThroughBH() * consumedChunksFromBH.size();

        double ifAllFromMC = nxtRequest.costOfTransferMC_BH();
        ifAllFromMC *= nxtRequest.referredContentDocument().chunks().size();
//        ifAllFromMC *= 
//                consumedChunksFromMCWhenDisconnected.size() 
//                + consumedChunksFromMC.size()
//                + consumedChunksFromBH.size()
//                + consumedChunksHitsHistory.size();

        if (ifAllFromMC == 0) {
            return Double.NaN;
        }

        return backhaul / ifAllFromMC;
    }

    @Override
    public String title() {
        return "%G_BH(" + getCachingPolicy().toString().substring(8) + ")";
    }

    @Override
    public String title(String str) {
        return "%G_BH" + "<" + str + ">" + "(" + getCachingPolicy().toString().substring(8) + ")";
//        return getClass().getName() + "<" + str + ">" + "(" + getCachingPolicy().toString().substring(8) + ")";
    }

    @Override
    public String titleBroaderCategory() {
        return "%G(" + getCachingPolicy().toString().substring(8) + ")";
    }
}
