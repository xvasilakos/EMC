package sim.space.users.mobile;

import caching.base.AbstractCachingPolicy;
import exceptions.CriticalFailureException;
import exceptions.InconsistencyException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import sim.Simulation;
import sim.content.request.DocumentRequest;
import sim.space.Area;
import sim.space.Point;

/**
 *
 * @author xvas
 */
public class MUBuilder {

    protected final Simulation __simulation;
    protected final MobileGroup __group;
    protected final Point __startCoordinates;
    protected final List<String> __connectionPolicySC;
    protected final List<DocumentRequest> __requests;
    protected final double[] __probsTransition;
    protected final int __maxProbDirection;

    protected int __id = MobileUser.ID_UNDEFINED;

    protected Area __area;
    protected String __transitionDecisions;

    protected Iterable<AbstractCachingPolicy> _cachingPolicies;

    public MUBuilder(
            Simulation simulation, MobileGroup group,
            Point startPoint, double[] probsTransition,
            List<String> connectionPolicySC,
            Iterable<AbstractCachingPolicy> cachingPolicies) {
        __simulation = simulation;

        __group = group;

        this.__startCoordinates = startPoint;
        if (this.__startCoordinates == null) {
            throw new InconsistencyException(
                    "MU that is a member of group " + __group.getId() + " must have a start point defined within area."
            );
        }

        // find the maximum probability to define __maxProbDirection
        this.__probsTransition = probsTransition;
        int maxProbDirection = -1;
        double maxProb = -1;
        for (int i = 0; i < __probsTransition.length; i++) {
            if (maxProb < __probsTransition[i]) {
                maxProbDirection = i;
                maxProb = __probsTransition[i];
            }
        }
        this.__maxProbDirection = maxProbDirection;

        this.__connectionPolicySC = connectionPolicySC;

        this.__requests = new ArrayList<>();

        this._cachingPolicies = cachingPolicies;
    }

    public MUBuilder setId(int id) {
        this.__id = id;
        return this;
    }

    public MUBuilder setArea(Area area) {
        this.__area = area;
        return this;
    }

    public MUBuilder setTransitionDecisions(String transitionDecisions) {
        this.__transitionDecisions = transitionDecisions;
        return this;
    }

    public MUBuilder setRequests(Set<DocumentRequest> requests) {
        this.__requests.addAll(requests);
        return this;
    }

    public MUBuilder setRequests(DocumentRequest... requests) {
        this.__requests.addAll(Arrays.asList(requests));
        return this;
    }

    public MobileUser build() {
        return new MobileUser(this);
    }

}
