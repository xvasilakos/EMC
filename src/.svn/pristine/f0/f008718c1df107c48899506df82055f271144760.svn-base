package caching;

import caching.base.AbstractCachingPolicy;
import exceptions.InvalidOrUnsupportedException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;

/**
 *
 * @author xvas
 */
public class CachingPoliciesFactory {

    /**
     * The registry of the supported caching methods.
     */
    private static final HashMap<String, AbstractCachingPolicy> supportedMethodsRegistry
            = new HashMap<>();
    /**
     * The registry of the appropriate buffer type per caching method.
     */
    private static final HashMap<String, Class> bufferTypesRegistry
            = new HashMap<>();

//   static {
//      supportedMethodsRegistry = new HashMap<>();
//      
//      supportedMethodsRegistry.put(caching.incremental.EPC1.instance().toString(), caching.incremental.EPC1.instance());
//      supportedMethodsRegistry.put(caching.incremental.EPC2.instance().toString(), caching.incremental.EPC2.instance());
//      supportedMethodsRegistry.put(caching.incremental.EPC3.instance().toString(), caching.incremental.EPC3.instance());
//
//      supportedMethodsRegistry.put(caching.epc.rplc.AccessLRU.instance().toString(), caching.epc.rplc.AccessLRU.instance());
//      supportedMethodsRegistry.put(caching.rplc.lru.Pop.instance().toString(), caching.rplc.lru.Pop.instance());
//      supportedMethodsRegistry.put(caching.rplc.mingain.Pop.instance().toString(), caching.rplc.mingain.Pop.instance());
//
//      supportedMethodsRegistry.put(caching.incremental.avg.EPCPop.instance().toString(), caching.incremental.avg.EPCPop.instance());
//      supportedMethodsRegistry.put(caching.incremental.sum.EPCPop.instance().toString(), caching.incremental.sum.EPCPop.instance());
//
//      supportedMethodsRegistry.put(caching.rplc.mingain.avg.EPCPop.instance().toString(), caching.rplc.mingain.avg.EPCPop.instance());
//      supportedMethodsRegistry.put(caching.rplc.mingain.sum.EPCPop.instance().toString(), caching.rplc.mingain.sum.EPCPop.instance());
//      
//      supportedMethodsRegistry.put(caching.incremental.Naive01.instance().toString(), caching.incremental.Naive01.instance());
//      supportedMethodsRegistry.put(caching.incremental.Naive02.instance().toString(), caching.incremental.Naive02.instance());
//      supportedMethodsRegistry.put(caching.rplc.lru.Naive.instance().toString(), caching.rplc.lru.Naive.instance());
//      
//      supportedMethodsRegistry.put(caching.incremental.Oracle.instance().toString(), caching.incremental.Oracle.instance());
//      supportedMethodsRegistry.put(caching.rplc.lru.Oracle.instance().toString(), caching.rplc.lru.Oracle.instance());
//      
//      supportedMethodsRegistry.put(caching.MaxPopularityMethod.instance().toString(), caching.MaxPopularityMethod.instance());
//   }
//
//   static {
//      bufferTypesRegistry = new HashMap<>();
//      bufferTypesRegistry.put(caching.incremental.EPC1.instance().toString(), caching.incremental.EPC1.bufferType());
//      bufferTypesRegistry.put(caching.incremental.EPC2.instance().toString(), caching.incremental.EPC2.bufferType());
//      bufferTypesRegistry.put(caching.incremental.EPC3.instance().toString(), caching.incremental.EPC3.bufferType());
//      
//      bufferTypesRegistry.put(caching.epc.rplc.AccessLRU.instance().toString(), caching.epc.rplc.AccessLRU.bufferType());
//      bufferTypesRegistry.put(caching.rplc.lru.Pop.instance().toString(), caching.rplc.lru.Pop.bufferType());
//      bufferTypesRegistry.put(caching.rplc.mingain.Pop.instance().toString(), caching.rplc.mingain.Pop.bufferType());
//      
//      bufferTypesRegistry.put(caching.incremental.avg.EPCPop.instance().toString(), caching.incremental.avg.EPCPop.bufferType());
//      bufferTypesRegistry.put(caching.incremental.sum.EPCPop.instance().toString(), caching.incremental.sum.EPCPop.bufferType());
//      
//      bufferTypesRegistry.put(caching.rplc.mingain.avg.EPCPop.instance().toString(), caching.rplc.mingain.avg.EPCPop.bufferType());
//      bufferTypesRegistry.put(caching.rplc.mingain.sum.EPCPop.instance().toString(), caching.rplc.mingain.sum.EPCPop.bufferType());
//      
//      bufferTypesRegistry.put(caching.incremental.Naive01.instance().toString(), caching.incremental.Naive01.bufferType());
//      bufferTypesRegistry.put(caching.incremental.Naive02.instance().toString(), caching.incremental.Naive02.bufferType());
//      bufferTypesRegistry.put(caching.rplc.lru.Naive.instance().toString(), caching.rplc.lru.Naive.bufferType());
//      
//      bufferTypesRegistry.put(caching.incremental.Oracle.instance().toString(), caching.incremental.Oracle.bufferType());
//      bufferTypesRegistry.put(caching.rplc.lru.Oracle.instance().toString(), caching.rplc.lru.Oracle.bufferType());
//      
//      bufferTypesRegistry.put(caching.MaxPopularityMethod.instance().toString(), caching.MaxPopularityMethod.bufferType());
//   }
    public static AbstractCachingPolicy getCachingPolicy(String cachingPolicy) throws InvalidOrUnsupportedException {
        if (!supportedMethodsRegistry.containsKey(cachingPolicy)) {
            throw new InvalidOrUnsupportedException("Invalid or "
                    + "unsupported type of caching method: " + cachingPolicy);
        }
        return supportedMethodsRegistry.get(cachingPolicy);
    }

    public static Class getBufferType(String cachingPolicy) throws InvalidOrUnsupportedException {
        if (!bufferTypesRegistry.containsKey(cachingPolicy)) {
            throw new InvalidOrUnsupportedException("Invalid or "
                    + "unsupported type of caching method: " + cachingPolicy);
        }
        return bufferTypesRegistry.get(cachingPolicy);
    }

    public static Class bufferTypeOf(AbstractCachingPolicy cachingPolicy) throws InvalidOrUnsupportedException {
        return getBufferType(cachingPolicy.toString());
    }

    public static AbstractCachingPolicy addCachingPolicy(String mthdStr)
            throws ClassNotFoundException, InstantiationException,
            IllegalAccessException, IllegalArgumentException,
            InvocationTargetException, NoSuchMethodException {
//        AbstractMethod mthd = (AbstractMethod) Class.forName(mthdStr).newInstance();

        Method instance = Class.forName(mthdStr).getMethod("instance");
        AbstractCachingPolicy abstrctMthd = (AbstractCachingPolicy) instance.invoke(null);

        supportedMethodsRegistry.put(mthdStr, abstrctMthd);

        Method bufferType = Class.forName(mthdStr).getMethod("bufferType");
        Class buffClass = (Class) bufferType.invoke(null);

        bufferTypesRegistry.put(mthdStr, buffClass);

        return abstrctMthd;
    }

}
