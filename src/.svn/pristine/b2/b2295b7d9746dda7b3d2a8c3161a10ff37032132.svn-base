package stats.gainstats.gains;

import caching.base.AbstractCachingPolicy;
import java.util.Iterator;
import java.util.List;
import sim.content.request.DocumentRequest;
import sim.content.Chunk;
import sim.space.cell.smallcell.SmallCell;
import sim.space.users.CachingUser;
import stats.StatisticException;
import stats.handlers.AbstractGainStat;

/**
 *
 * @author Xenofon Vasilakos xvas@aueb.gr
 */
public class HITPercent extends AbstractGainStat<CachingUser, SmallCell> {

    public HITPercent(AbstractCachingPolicy cachingMethod) {
        super(cachingMethod);
    }

    @Override
    public final double compute2(CachingUser user) throws StatisticException {
        double hitSum = 0;
        double totalChunks = 0;

        Iterator<DocumentRequest> iterator = user.getRequests().iterator();
        while (iterator.hasNext()) {
            DocumentRequest nxtRequest = iterator.next();
            List<Chunk> consumedChunksHitsHistory = nxtRequest.getChunksCacheHitsHistory(_cachingPolicy);
            List<Chunk> consumedChunksFromBH = nxtRequest.getChunksConsumedHistoryFromBH(_cachingPolicy);
            List<Chunk> consumedChunksFromMC = nxtRequest.getChunksConsumedHistoryFromMC(_cachingPolicy);

            double cacheHit = consumedChunksHitsHistory.size();

            double ifAllFromMC
                    = consumedChunksFromMC.size()
                    + consumedChunksFromBH.size()
                    + consumedChunksHitsHistory.size();

            hitSum += cacheHit;
            totalChunks += ifAllFromMC;
        }
        if (hitSum == 0) {
            return 0;
        }
        if (totalChunks == 0) {
            throw new StatisticException("Impossible to compute");
        }

        return hitSum / totalChunks;
    }

    @Override
    public String title() {
        return "Hit%(" + _cachingPolicy.toString().substring(8) + ")";
    }
}
